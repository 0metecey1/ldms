const char *ldms_init_lua_str = \
"--Open hardware specific libraried\n"
"lpeg = require('lpeg')\n"
"driver = require('luasql.mysql')\n"
"--load database driver\n"
"env = assert (driver.mysql())\n"
"--Initializes the basic objects as global variables\n"
"led = tlc5948a.new('/dev/spidev2.0')\n"
"pmu = ad5522.new(1, 0, 0, 126) \n"
"lmu = mcdc04.new(1, 0x74)\n"
"ldms = {}\n"
"ldms.__index = ldms\n"
"\n"
"setmetatable(ldms, {\n"
"    __call = function (cls, ...)\n"
"        return cls.new(...)\n"
"    end,\n"
"})\n"
"\n"
"function ldms.new(init)\n"
"    local self = setmetatable({}, ldms)\n"
"    return self\n"
"end\n"
"\n"
"\n"
"function ldms:get_box_id()\n"
"    local cmd = 'owdir /bus.0'\n"
"    local f = assert(io.popen(cmd, 'r'))\n"
"    local s = assert(f:read('*a'))\n"
"\n"
"    --local family, id = assert(string.match(s, \"/bus.0/(%x%x).(%x+)\"))\n"
"    local family = assert(string.match(s, '/bus.0/(%x%x)'), 'No box id memory device')\n"
"    local id = assert(string.match(s, '/bus.0/'..family..'.(%x+)'), 'Invalid box id')\n"
"    return family..id\n"
"end\n"
// "\n"
// "function ldms:get_board_id()\n"
// "    local id = ''\n"
// "    local f = assert(io.open('/sys/bus/i2c/devices/0-0050/eeprom', 'r'))\n"
// "    f:seek('end', -6) --48 bit serial number is in last 6 bytes\n"
// "    local s = assert(f:read('*a'))\n"
// "    for b in string.gmatch(s, '.') do\n"
// "        id = id .. string.format('%02X', string.byte(b))\n"
// "    end\n"
// "\n"
// "    return id\n"
// "end\n"
// "hw = ldms()\n"
// "local space = lpeg.S(' \t\n\v\f\r')\n"
// "local nospace = 1 - space\n"
// "local ptrim = space^0 * lpeg.C((space^0 * nospace^1)^0)\n"
// "local match = lpeg.match\n"
// "local function trim(s)\n"
// "    return match(ptrim, s)\n"
// "end\n"
// "\n"
// "local function split (s, sep)\n"
// "    sep = lpeg.P(sep)\n"
// "    local elem = lpeg.C((1 - sep)^0)\n"
// "    local p = lpeg.Ct(elem * (sep * elem)^0)   -- make a table capture\n"
// "    return lpeg.match(p, s)\n"
// "end\n"
// "\n"
// "local function get_own_ip()\n"
// "    local sql_query = 'select host from information_schema.processlist WHERE ID=connection_id();'\n"
// "    local cur = con:execute(sql_query)\n"
// "    return (split(cur:fetch(), ':'))[1]\n"
// "end\n"
// "\n"
// "function append_to_db(driver, str)\n"
// "    -- connect to data source\n"
// "    con = env:connect('nltsdb', 'root', '1', '192.168.16.10')\n"
// "    if not con then return end\n"
// "    local sql_query = string.format(\n"
// "    'update tblData as D, tblPorts as P '..\n"
// "    'set D.LTData=if(D.LTData is NULL, '..\n"
// "    ''%s', concat(D.LTData,'%s')) '..\n"
// "    'where D.ID_Sample=P.ID_Sample and P.IPAddress ='%s''..\n"
// "    ' and D.DriverNo=%d', str, str, get_own_ip(), driver) \n"
// "    local cur = con:execute(sql_query)\n"
// "    if not cur then print('SQL query was not successful') end\n"
// "    con:close()\n"
// "end\n"
// "\n"
"-- Turn on right led with white, full intensity\n"
"led:turn_on(1)\n"
"led:turn_on(2)\n"
"led:turn_on(3)\n";
